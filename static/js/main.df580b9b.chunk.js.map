{"version":3,"sources":["components/search_bar.js","components/video_list_item.js","components/video_list.js","components/video_detail.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","state","term","className","value","this","setState","onChange","event","onInputChange","target","onSearchTermChange","Component","VideoListItem","video","onVideoSelect","imageUrl","snippet","thumbnails","default","url","onClick","src","alt","title","VideoList","videoItems","videos","map","key","etag","VideoDetail","videoId","id","description","App","selectedVideo","videoSearch","YTSerch","_","debounce","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySA0BeA,E,YAtBX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KAEDC,MAAQ,CAAEC,KAAM,IAHP,E,sEAKR,IAAD,OACL,OACA,yBAAKC,UAAU,cACf,2BACAC,MAAOC,KAAKC,SAASJ,KACrBK,SAAU,SAAAC,GAAK,OAAI,EAAKC,cAAcD,EAAME,OAAON,a,oCAIzCF,GACVG,KAAKC,SAAS,CAACJ,SACfG,KAAKL,MAAMW,mBAAmBT,O,GAjBdU,aCgBTC,EAjBO,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,cACrBC,EAAWF,EAAMG,QAAQC,WAAWC,QAAQC,IAClD,OACI,wBAAIC,QAAS,kBAAMN,EAAcD,IAASX,UAAU,mBAChD,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,cACX,yBAAKmB,IAAKN,EAAUb,UAAU,eAAeoB,IAAI,kBAGrD,yBAAKpB,UAAU,cACX,yBAAKA,UAAU,iBAAiBW,EAAMG,QAAQO,WCOnDC,EAhBG,SAACzB,GACf,IAAM0B,EAAa1B,EAAM2B,OAAOC,KAAI,SAACd,GACjC,OAAO,kBAAC,EAAD,CACPC,cAAef,EAAMe,cACrBc,IAAKf,EAAMgB,KACXhB,MAAOA,OAGP,OACI,wBAAIX,UAAU,uBACTuB,ICYFK,EAvBK,SAAC,GAAa,IAAZjB,EAAW,EAAXA,MAClB,GAAa,MAATA,EACA,OAAO,2CAIX,IAAMkB,EAAUlB,EAAMmB,GAAGD,QACnBZ,EAAG,wCAAoCY,GAC7C,OACI,yBAAK7B,UAAU,yBACX,yBAAKA,UAAU,2CACX,4BAAQA,UAAU,wBAAwBmB,IAAKF,EAAKI,MAAOJ,KAE/D,yBAAKjB,UAAU,WACX,6BAAMW,EAAMG,QAAQO,OACpB,6BAAMV,EAAMG,QAAQiB,gBC+BrBC,E,YAtCb,WAAYnC,GAAO,IAAD,8BACd,4CAAMA,KAEDC,MAAQ,CACT0B,OAAQ,GACRS,cAAe,MAGnB,EAAKC,YAAY,SARH,E,yEAYNnC,GAAM,IAAD,OACboC,IAAQ,CAACT,IAhBC,0CAgBa3B,SAAO,SAACyB,GAC3B,EAAKrB,SAAS,CACTqB,OAAQA,EACRS,cAAeT,EAAO,U,+BAI1B,IAAD,OAEEU,EAAcE,IAAEC,UAAS,SAACtC,GAAW,EAAKmC,YAAYnC,KAAS,KAErE,OACA,6BACI,kBAAC,EAAD,CAAWS,mBAAqB0B,IAChC,kBAAC,EAAD,CAAavB,MAAOT,KAAKJ,MAAMmC,gBAC/B,kBAAC,EAAD,CACArB,cAAe,SAACqB,GAAD,OAAkB,EAAK9B,SAAS,CAAC8B,mBAChDT,OAAQtB,KAAKJ,MAAM0B,c,GA/BXf,aCGE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.df580b9b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass SearchBar extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = { term: ''};\r\n    }\r\n    render() {\r\n        return(\r\n        <div className=\"search-bar\">\r\n        <input \r\n        value={this.setState.term} \r\n        onChange={event => this.onInputChange(event.target.value)} />\r\n        </div>);\r\n    }\r\n\r\n    onInputChange(term){\r\n        this.setState({term});\r\n        this.props.onSearchTermChange(term);\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nconst VideoListItem = ({video, onVideoSelect}) => {\r\n    const imageUrl = video.snippet.thumbnails.default.url;\r\n    return (\r\n        <li onClick={() => onVideoSelect(video)}  className=\"list-group-item\">\r\n            <div className=\"video-list media\">\r\n                <div className=\"media-left\">\r\n                    <img src={imageUrl} className=\"media-object\" alt=\"YouTubeVideo\" />\r\n                </div>\r\n\r\n                <div className=\"media-body\">\r\n                    <div className=\"media-heading\">{video.snippet.title}</div>\r\n                </div>\r\n            </div>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default VideoListItem;","import React from 'react';\r\nimport VideoListItem from './video_list_item';\r\n\r\nconst VideoList = (props) => {\r\n    const videoItems = props.videos.map((video) => {\r\n        return <VideoListItem \r\n        onVideoSelect={props.onVideoSelect}\r\n        key={video.etag} \r\n        video={video} \r\n        />\r\n    })\r\n        return(\r\n            <ul className=\"col-md-4 list-group\">\r\n                {videoItems}\r\n            </ul>\r\n        );\r\n    \r\n};\r\n\r\nexport default VideoList;","import React from 'react';\r\n\r\nconst VideoDetail = ({video}) => {\r\n    if (video == null) {\r\n        return <div>Loading...</div>;\r\n\r\n    }\r\n\r\n    const videoId = video.id.videoId;\r\n    const url = `https://www.youtube.com/embed/${videoId}`;\r\n    return(\r\n        <div className=\"video-detail col-md-8\">\r\n            <div className=\"embed-responsive embed-responsive-16by9\">\r\n                <iframe className=\"embed-responsive-item\" src={url} title={url}></iframe>\r\n            </div>\r\n            <div className=\"details\">\r\n                <div>{video.snippet.title}</div>\r\n                <div>{video.snippet.description}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\n\r\nexport default VideoDetail;","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport YTSerch from 'youtube-api-search'\n\nimport SearchBar from './components/search_bar';\nimport VideoList from './components/video_list';\nimport VideoDetail from './components/video_detail';\nconst API_KEY = 'AIzaSyAUDtEaElIQ3ZwfSmsjeHh0f-NRf1eZ4og';\n\nclass App extends Component{\n  constructor(props){\n      super(props);\n\n      this.state = { \n          videos: [],\n          selectedVideo: null\n      };\n\n      this.videoSearch('react');\n\n  }\n\n  videoSearch(term){\n      YTSerch({key: API_KEY, term}, (videos)=>{\n          this.setState({\n               videos: videos,\n               selectedVideo: videos[0]\n              })\n      });\n  }\n  render(){\n\n      const videoSearch = _.debounce((term) => { this.videoSearch(term) }, 300)\n      //one way binding with pass app state to VideoList\n      return (\n      <div>\n          <SearchBar onSearchTermChange= {videoSearch} />\n          <VideoDetail video={this.state.selectedVideo} />\n          <VideoList \n          onVideoSelect={(selectedVideo)=> this.setState({selectedVideo}) }\n          videos={this.state.videos}\n           /> \n      </div>\n      );\n}\n\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}